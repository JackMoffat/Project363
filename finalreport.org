
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+Title: The N-back Test
#+Latex_header: \bibliographystyle{plain}

* Introduction

In 1958, Wayne Kirchner invented the n-back test \cite{COULACOGLOU201791}. The n-back test is a visuospatial task that has been shown to improve working memory and attentional skills \cite{COLOM2013712}. The basic mechanisms of the test involve the presentation of continuous stimulis in terms of letters or pictures – for every stimulus presented, the participant has to indicate whether it matches a stimulus that was presented n stimuli ago \cite{Kane}. There are different types of n-back tests known as loads: 3-back test, 2-back test and 1-back test \cite{Forns}.

* Hypothesis

Our hypothesis was that participants would have a more challenging time remembering things initially which would be reflected in a longer reaction time to congruent stimulis in the 2-back test compared to the reaction time of a 1-back test. However, as n-back tests are shown to improve working and short term memory \cite{LEONDOMINGUEZ2015167}, we expect participants to get better at remembering, reflected in shorter reaction times in responding to congruent stimulis.

* Materials/Methods
** Information from Pelegrina et. Al (2015)
From \cite{NormativeData}
*** TODO R code: ensure table aligns with a page upon generation in pdf (or insert sideways)
#+BEGIN_SRC R :session *tables* :exports both :results replace
  table4 <- read.csv("./dataFromPaper/csvfpsyg-06-01544.csv")


#+END_SRC

#+RESULTS:
|        |            | nil |  Age group |            |            |            |            |            |            |  Age group |            |            |            |            |            |            |
|        |            | nil |          7 |          8 |          9 |         10 |         11 |         12 |         13 |          7 |          8 |          9 |         10 |         11 |         12 |         13 |
|        |            | nil | ( n = 193) | ( n = 285) | ( n = 310) | ( n = 297) | ( n = 315) | ( n = 253) | ( n = 233) | ( n = 194) | ( n = 307) | ( n = 296) | ( n = 321) | ( n = 286) | ( n = 223) | ( n = 209) |
| Total  | M          | nil |      14.45 |      16.71 |      17.63 |      20.23 |      21.94 |       22.5 |      24.82 |      14.25 |      15.58 |       18.7 |      21.07 |      23.24 |       24.7 |       27.2 |
|        | SD         | nil |       8.49 |        9.2 |       9.17 |       9.44 |        9.9 |       9.66 |       9.85 |       8.58 |       8.41 |       9.29 |        9.1 |       9.28 |       9.21 |       8.74 |
|        | Percentile |   5 |          3 |          3 |          4 |          4 |          4 |          4 |          4 |          2 |          3 |          4 |          5 |          5 |          7 |         11 |
|        |            |  25 |          7 |         10 |         10 |         13 |         14 |         14 |         18 |          8 |         10 |         12 |         13 |         16 |         18 |         23 |
|        |            |  50 |         13 |         15 |         16 |         21 |         24 |         24 |         28 |         13 |         15 |         18 |         22 |         25 |         26 |         30 |
|        |            |  75 |         22 |         25 |         25 |         28 |         30 |         30 |         32 |         20 |         22 |         26 |         28 |         31 |         31 |         34 |
|        |            |  95 |         28 |         32 |         32 |         35 |         35 |         37 |         37 |         30 |         30 |         34 |         35 |         35 |         38 |         39 |
| 1-back | M          | nil |       8.05 |       8.82 |       9.14 |       9.72 |      10.01 |       10.2 |      10.28 |       8.21 |        8.6 |       9.54 |      10.11 |      10.41 |      10.73 |      11.29 |
|        | SD         | nil |       3.04 |       3.09 |       2.82 |       2.96 |       2.98 |       2.96 |       2.96 |       3.29 |       3.09 |       3.12 |       2.86 |       2.77 |       2.55 |       2.34 |
|        | Percentile |   5 |          3 |          3 |          4 |          4 |          4 |          4 |          4 |          2 |          3 |          4 |          5 |          5 |          6 |          7 |
|        |            |  25 |          6 |          7 |          7 |          8 |          8 |          8 |          9 |          6 |          6 |          7 |          8 |          9 |          9 |         10 |
|        |            |  50 |          8 |          9 |          9 |         10 |         11 |         11 |         11 |          8 |          9 |         10 |         11 |         11 |         11 |         12 |
|        |            |  75 |         10 |         11 |         11 |         12 |         12 |         13 |         12 |         11 |         11 |         12 |         12 |         12 |         13 |         13 |
|        |            |  95 |         13 |         13 |         13 |         14 |         14 |         14 |         14 |         14 |         13 |         14 |         14 |         14 |         14 |         14 |
| 2-back | M          | nil |        4.1 |       5.02 |       5.23 |       6.29 |       6.96 |       7.26 |       8.16 |       3.96 |       4.53 |       5.74 |       6.52 |       7.44 |       7.93 |       9.11 |
|        | SD         | nil |       3.64 |       3.67 |       3.81 |       3.78 |       4.08 |       3.91 |       3.99 |       3.59 |       3.49 |       3.76 |        3.5 |       3.68 |       3.77 |       3.75 |
|        | Percentile |   5 |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          2 |
|        |            |  25 |          – |          2 |          2 |          3 |          4 |          5 |          6 |          – |          1 |          3 |          4 |          5 |          6 |          7 |
|        |            |  50 |          4 |          5 |          5 |          6 |          7 |          8 |          9 |          3 |          5 |          6 |          7 |          8 |          8 |         10 |
|        |            |  75 |          7 |          8 |          8 |          9 |         10 |         11 |         11 |          6 |          7 |          9 |          9 |         10 |         11 |         12 |
|        |            |  95 |         11 |         11 |         12 |         12 |         13 |         13 |         13 |         11 |         10 |         12 |         12 |         13 |         13 |         14 |
| 3-back | M          | nil |        2.3 |       2.87 |       3.26 |       4.23 |       4.97 |       5.04 |       6.37 |       2.07 |       2.45 |       3.41 |       4.44 |       5.38 |       6.05 |        6.8 |
|        | SD         | nil |       3.41 |       3.81 |       3.91 |       4.15 |       4.27 |       4.12 |       4.27 |       3.46 |       3.46 |       3.98 |       4.24 |       4.28 |       4.36 |       4.11 |
|        | Percentile |   5 |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |          – |
|        |            |  25 |          – |          – |          – |          – |          – |          – |          2 |          – |          – |          – |          – |          – |          1 |          5 |
|        |            |  50 |          – |          – |          – |          4 |          6 |          6 |          7 |          – |          – |          – |          5 |          6 |          7 |          8 |
|        |            |  75 |          5 |          6 |          7 |          8 |          9 |          8 |         10 |          4 |          5 |          7 |          8 |          9 |         10 |         10 |
|        |            |  95 |          9 |         10 |         11 |         11 |         11 |         11 |         12 |         10 |         10 |         10 |         11 |         12 |         12

*** Python Code For 
#+BEGIN_SRC python :session *python* :exports :results both
  import pandas as pd
  t4pd = pd.read_csv("./dataFromPaper/csvfpsyg-06-01544.csv")
  for i in ['Boys','Girls']:
      print(t4pd[i])
#+END_SRC
#+RESULTS:

** Inline usage

* Results
** Table
** Simple summary statistics
** 2 plots

* Discussion

Our experiment was done with the hypothesis that the reaction time to stimuli in a 1-Back test would be shorter than the reaction time to stimuli in a 2-Back test. This was based off of the fact that there is one extra letter presented between letter stimuli to remember during 2-Back tests. This test is a working memory task, but it could also potentially be used to test the recency effect, which has been shown to be eliminated when another stimulus is presented. \cite cohen1989effects
* Bibliography
 need to add the fpsyg-06-01544 citation!
#+latex: \bibliography{references}

* Appendix
** Python Code for n-back test
#+BEGIN_SRC python
  from psychopy import visual, event, core
  import pandas as pd
  import random
  import time as systime

  #########
  # setup #
  #############################

  #############
  # Make lists / define functions #
  #############


  def makeMatches(in_list, trials=5,
                  threshold=0, n_back=2,
                  keep_list_stats=True, verbose=False):
      '''Creates the matches in a given list.if a random number is greater than threshold,
      then match the letters at positions [idx] and [idx-n_back]
      in_list: list of letters, strings, etc
      trials: how many trials to run
      threshold: type(float) in range(0,1)ld
      keep_stats: Bool: will output a list with information on
      the matches (position, character) and their frequency
      verbose: Bool: prints information about the lists for immediate viewing
      '''

      # done this way to avoid changing original list, confirm necessity?
      out_list = [i for i in in_list]
      list_stats = []  # list holding the character and positions it was matched at
      num_matches = 0
      for idx, char in enumerate(in_list):
          if idx > 1:
              if (random.random() > threshold):
                  out_list[idx] = in_list[idx-n_back]
                  list_stats.append([(idx, idx-2), char]
                                    ) if keep_list_stats else None
                  num_matches += 1

                  real_match_rate = num_matches / (len(in_list) - 2)
                  # show _stats or not
                  if verbose:  # switch this out of a print statement for final thing so it doesnt show up
                      print(
                          f"{num_matches} of {len(in_list)-2} possible matches: {real_match_rate* 100} %")
                      print(f"in_list\n", in_list, "\nmatched list\n", out_list)
                  else:
                      pass

                  if keep_list_stats:
                      list_stats.insert(0, [(num_matches), "number of matches"])
                      list_stats.insert(0, [(real_match_rate), "actual match rate"])
          return(out_list, list_stats)
      else:
          return(out_list)


  #####################
  # create trial list #
  #####################

  n_trials = 15
  # need to think of this inverted with how the code is currently written
  match_frequency_threshold = 0.5
  alphabet = [i for i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ"]
  initial_letters = [random.choice(alphabet) for i in range(n_trials)]

  trial_list = makeMatches(initial_letters, trials=n_trials,
                           threshold=match_frequency_threshold, keep_list_stats=False)
  ptt = 1.2
  # ptt is the amount of time between trials, stands for "per time trial"

  ######################
  # Window setup below #
  ######################
  mywin = visual.Window(fullscr=True, screen=0, allowGUI=False, allowStencil=False,
                        monitor='testMonitor', color=[0, 0, 0], colorSpace='rgb')

  clock = core.Clock()  # this is a clock

  press_times = []  # List records the data


  ##############################

  intro = True

  if intro:
      # TODO  Find out how to display the last sentence in text_string
      text_string = f"This is an N-Back task.  This task is a test of working memory.  You will be presented with a random series of letters, one by one.  For this task, you will press the spacebar if you see a letter that was repeated two letters back.  For example, if you see a sequence such as A, D, A, then you will have to press the spacebar.  You will be given a sequence of {n_trials} letters.  "
      textList = text_string.split("  ")
      for msg in textList:
          displayMsg = visual.TextStim(
              mywin, text=msg, pos=(0.5, 0))
          mywin.flip()
          displayMsg.draw()
          core.wait(3.5)

      countdownMessage = visual.TextStim(
          mywin, text='The task will begin after this countdown.', pos=(0.5, 0))
      countdownMessage.autoDraw = True
      mywin.flip()
      core.wait(3.5)
      countdownMessage.text = ' '
      mywin.flip()
      core.wait(0.5)



  countdownString = "5,4,3,2,1"
  countdown = countdownString.split(',')
  # ct is the countdown timer

  for num in countdown:
      txtDisplay = visual.TextStim(
          mywin, text = num , alignHoriz='left', alignVert='center', pos=(0, 0))
      mywin.flip()
      txtDisplay.draw()
      core.wait(1.0)


  ###################
  # display letters #
  ###################

  trialTime = core.Clock()

  for idx, char in enumerate(trial_list):

      trialLength = core.CountdownTimer()
      keys = event.getKeys(keyList=["space"], timeStamped = trialLength)
      txtDisplay.text = char
      mywin.flip()
      txtDisplay.draw()
      print(keys, trialLength.getTime(), txtDisplay.text)
      press_times.append([keys, trialLength.getTime(), txtDisplay.text])
      core.wait(ptt)
      txtDisplay.text = "+"
      mywin.flip()
      txtDisplay.draw()
      core.wait(ptt)
      trialLength.reset()
      # currently appending in tuple form list_stats = []  # list holding the character and positions it was matched at

  endMessage = visual.TextStim(
      mywin, text = ' ', pos=(0.5, 0))
  endMessage.autoDraw=True
  mywin.flip()
  core.wait(1.5)
  endMessage.text = 'You have completed the N-Back task. Thank you!'
  mywin.flip()
  core.wait(3.0)

  print(press_times)

  ts = systime.localtime()
  timestamp = str(systime.strftime("Y%yM%mD%dH%HM%MS%S",ts))
  datafile = open(f"datafile_{timestamp}.txt", "w+")

  ################
  # writing file #
  ################
  for line in press_times:
      datafile.write(str(line))
      datafile.write("\n")
      datafile.close()

  # #not sure needed
  # for line in n_list:
  #     datafile.write(line,)
  #     datafile.write("\n")

  # for line in stats:
  #     datafile.write(line)
  #     datafile.write("\n")

#+END_SRC
** Data from Our Python Code
